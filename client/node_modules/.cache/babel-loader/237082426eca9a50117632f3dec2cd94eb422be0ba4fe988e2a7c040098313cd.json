{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pedro\\\\Desktop\\\\NFTradeMarketPlace\\\\client\\\\src\\\\pages\\\\User\\\\ResetPass.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { TextField, Button, CircularProgress, Container, Paper, Typography, Box } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResetPassword = () => {\n  _s();\n  const {\n    token\n  } = useParams();\n  const navigate = useNavigate();\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    if (!token) {\n      toast.error(\"Invalid reset token.\", {\n        position: \"top-right\"\n      });\n      navigate(\"/login\");\n    }\n  }, [token, navigate]);\n  const validatePassword = () => {\n    if (!newPassword || !confirmPassword) {\n      return \"Both password fields are required.\";\n    }\n    if (newPassword !== confirmPassword) {\n      return \"Passwords do not match.\";\n    }\n    const passwordPattern = /^(?=.*[A-Z])(?=.*\\d.*\\d)(?=.*[\\W_]).{8,}$/;\n    if (!passwordPattern.test(newPassword)) {\n      return \"Password must be at least 8 characters long, include one uppercase letter, two numbers, and one special character.\";\n    }\n    return \"\";\n  };\n  const handlePasswordReset = async e => {\n    e.preventDefault();\n    setLoading(true);\n    const validationMessage = validatePassword();\n    if (validationMessage) {\n      toast.error(validationMessage, {\n        position: \"top-right\"\n      });\n      setLoading(false);\n      return;\n    }\n    try {\n      const res = await fetch(`http://localhost:5000/user/reset-password/${token}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          newPassword\n        })\n      });\n      const data = await res.json();\n      if (!res.ok) {\n        toast.error(data.message || \"Password reset failed. Try again.\", {\n          position: \"top-right\"\n        });\n        return;\n      }\n      toast.success(data.message || \"Password reset successful. You can now log in.\", {\n        position: \"top-right\"\n      });\n      setTimeout(() => {\n        navigate(\"/login\");\n      }, 1500);\n    } catch (error) {\n      toast.error(\"An error occurred while resetting the password. Try again later.\", {\n        position: \"top-right\"\n      });\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        padding: 4,\n        mt: 5,\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        gutterBottom: true,\n        children: \"Reset Your Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        sx: {\n          mb: 2\n        },\n        children: \"Enter a new password to reset your account.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        component: \"form\",\n        onSubmit: handlePasswordReset,\n        sx: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          gap: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          type: \"password\",\n          label: \"New Password\",\n          variant: \"outlined\",\n          fullWidth: true,\n          value: newPassword,\n          onChange: e => setNewPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          type: \"password\",\n          label: \"Confirm New Password\",\n          variant: \"outlined\",\n          fullWidth: true,\n          value: confirmPassword,\n          onChange: e => setConfirmPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          fullWidth: true,\n          disabled: loading,\n          children: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 24\n          }, this) : \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(ResetPassword, \"HaUrD94BT+WGqbD9iKnQqGo13RU=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","toast","TextField","Button","CircularProgress","Container","Paper","Typography","Box","jsxDEV","_jsxDEV","ResetPassword","_s","token","navigate","newPassword","setNewPassword","confirmPassword","setConfirmPassword","loading","setLoading","error","position","validatePassword","passwordPattern","test","handlePasswordReset","e","preventDefault","validationMessage","res","fetch","method","headers","body","JSON","stringify","data","json","ok","message","success","setTimeout","console","maxWidth","children","elevation","sx","padding","mt","textAlign","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","color","mb","component","onSubmit","display","flexDirection","gap","type","label","fullWidth","value","onChange","target","disabled","size","_c","$RefreshReg$"],"sources":["C:/Users/pedro/Desktop/NFTradeMarketPlace/client/src/pages/User/ResetPass.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { TextField, Button, CircularProgress, Container, Paper, Typography, Box } from \"@mui/material\";\r\n\r\nconst ResetPassword = () => {\r\n  const { token } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!token) {\r\n      toast.error(\"Invalid reset token.\", { position: \"top-right\" });\r\n      navigate(\"/login\");\r\n    }\r\n  }, [token, navigate]);\r\n\r\n  const validatePassword = () => {\r\n    if (!newPassword || !confirmPassword) {\r\n      return \"Both password fields are required.\";\r\n    }\r\n\r\n    if (newPassword !== confirmPassword) {\r\n      return \"Passwords do not match.\";\r\n    }\r\n\r\n    const passwordPattern = /^(?=.*[A-Z])(?=.*\\d.*\\d)(?=.*[\\W_]).{8,}$/;\r\n    if (!passwordPattern.test(newPassword)) {\r\n      return \"Password must be at least 8 characters long, include one uppercase letter, two numbers, and one special character.\";\r\n    }\r\n\r\n    return \"\";\r\n  };\r\n\r\n  const handlePasswordReset = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n\r\n    const validationMessage = validatePassword();\r\n    if (validationMessage) {\r\n      toast.error(validationMessage, { position: \"top-right\" });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`http://localhost:5000/user/reset-password/${token}`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ newPassword }),\r\n      });\r\n\r\n      const data = await res.json();\r\n      if (!res.ok) {\r\n        toast.error(data.message || \"Password reset failed. Try again.\", { position: \"top-right\" });\r\n        return;\r\n      }\r\n\r\n      toast.success(data.message || \"Password reset successful. You can now log in.\", { position: \"top-right\" });\r\n\r\n      setTimeout(() => {\r\n        navigate(\"/login\");\r\n      }, 1500);\r\n    } catch (error) {\r\n      toast.error(\"An error occurred while resetting the password. Try again later.\", { position: \"top-right\" });\r\n      console.error(error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\">\r\n      <Paper elevation={3} sx={{ padding: 4, mt: 5, textAlign: \"center\" }}>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          Reset Your Password\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 2 }}>\r\n          Enter a new password to reset your account.\r\n        </Typography>\r\n\r\n        <Box component=\"form\" onSubmit={handlePasswordReset} sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n          <TextField\r\n            type=\"password\"\r\n            label=\"New Password\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            value={newPassword}\r\n            onChange={(e) => setNewPassword(e.target.value)}\r\n          />\r\n          <TextField\r\n            type=\"password\"\r\n            label=\"Confirm New Password\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            value={confirmPassword}\r\n            onChange={(e) => setConfirmPassword(e.target.value)}\r\n          />\r\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth disabled={loading}>\r\n            {loading ? <CircularProgress size={24} /> : \"Reset Password\"}\r\n          </Button>\r\n        </Box>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}