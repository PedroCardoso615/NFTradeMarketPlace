{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{useNavigate,useParams}from\"react-router-dom\";import{toast}from\"react-toastify\";import{TextField,Button,CircularProgress,Container,Paper,Typography,Box}from\"@mui/material\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ResetPassword=()=>{const{token}=useParams();const navigate=useNavigate();const[newPassword,setNewPassword]=useState(\"\");const[confirmPassword,setConfirmPassword]=useState(\"\");const[loading,setLoading]=useState(false);useEffect(()=>{if(!token){toast.error(\"Invalid reset token.\",{position:\"top-right\"});navigate(\"/login\");}},[token,navigate]);const validatePassword=()=>{if(!newPassword||!confirmPassword){return\"Both password fields are required.\";}if(newPassword!==confirmPassword){return\"Passwords do not match.\";}const passwordPattern=/^(?=.*[A-Z])(?=.*\\d.*\\d)(?=.*[\\W_]).{8,}$/;if(!passwordPattern.test(newPassword)){return\"Password must be at least 8 characters long, include one uppercase letter, two numbers, and one special character.\";}return\"\";};const handlePasswordReset=async e=>{e.preventDefault();setLoading(true);const validationMessage=validatePassword();if(validationMessage){toast.error(validationMessage,{position:\"top-right\"});setLoading(false);return;}try{const res=await fetch(`https://nftrade-marketplace.vercel.app/user/reset-password/${token}`,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({newPassword})});const data=await res.json();if(!res.ok){toast.error(data.message||\"Password reset failed. Try again.\",{position:\"top-right\"});return;}toast.success(data.message||\"Password reset successful. You can now log in.\",{position:\"top-right\"});setTimeout(()=>{navigate(\"/login\");},1500);}catch(error){toast.error(\"An error occurred while resetting the password. Try again later.\",{position:\"top-right\"});console.error(error);}finally{setLoading(false);}};return/*#__PURE__*/_jsx(Container,{maxWidth:\"sm\",children:/*#__PURE__*/_jsxs(Paper,{elevation:3,sx:{padding:4,mt:5,textAlign:\"center\"},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",gutterBottom:true,children:\"Reset Your Password\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"textSecondary\",sx:{mb:2},children:\"Enter a new password to reset your account.\"}),/*#__PURE__*/_jsxs(Box,{component:\"form\",onSubmit:handlePasswordReset,sx:{display:\"flex\",flexDirection:\"column\",gap:2},children:[/*#__PURE__*/_jsx(TextField,{type:\"password\",label:\"New Password\",variant:\"outlined\",fullWidth:true,value:newPassword,onChange:e=>setNewPassword(e.target.value)}),/*#__PURE__*/_jsx(TextField,{type:\"password\",label:\"Confirm New Password\",variant:\"outlined\",fullWidth:true,value:confirmPassword,onChange:e=>setConfirmPassword(e.target.value)}),/*#__PURE__*/_jsx(Button,{type:\"submit\",variant:\"contained\",color:\"primary\",fullWidth:true,disabled:loading,children:loading?/*#__PURE__*/_jsx(CircularProgress,{size:24}):\"Reset Password\"})]})]})});};export default ResetPassword;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","toast","TextField","Button","CircularProgress","Container","Paper","Typography","Box","jsx","_jsx","jsxs","_jsxs","ResetPassword","token","navigate","newPassword","setNewPassword","confirmPassword","setConfirmPassword","loading","setLoading","error","position","validatePassword","passwordPattern","test","handlePasswordReset","e","preventDefault","validationMessage","res","fetch","method","headers","body","JSON","stringify","data","json","ok","message","success","setTimeout","console","maxWidth","children","elevation","sx","padding","mt","textAlign","variant","gutterBottom","color","mb","component","onSubmit","display","flexDirection","gap","type","label","fullWidth","value","onChange","target","disabled","size"],"sources":["C:/Users/pedro/Desktop/NFTradeMarketPlace/client/src/pages/User/ResetPass.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { TextField, Button, CircularProgress, Container, Paper, Typography, Box } from \"@mui/material\";\r\n\r\nconst ResetPassword = () => {\r\n  const { token } = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!token) {\r\n      toast.error(\"Invalid reset token.\", { position: \"top-right\" });\r\n      navigate(\"/login\");\r\n    }\r\n  }, [token, navigate]);\r\n\r\n  const validatePassword = () => {\r\n    if (!newPassword || !confirmPassword) {\r\n      return \"Both password fields are required.\";\r\n    }\r\n\r\n    if (newPassword !== confirmPassword) {\r\n      return \"Passwords do not match.\";\r\n    }\r\n\r\n    const passwordPattern = /^(?=.*[A-Z])(?=.*\\d.*\\d)(?=.*[\\W_]).{8,}$/;\r\n    if (!passwordPattern.test(newPassword)) {\r\n      return \"Password must be at least 8 characters long, include one uppercase letter, two numbers, and one special character.\";\r\n    }\r\n\r\n    return \"\";\r\n  };\r\n\r\n  const handlePasswordReset = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n\r\n    const validationMessage = validatePassword();\r\n    if (validationMessage) {\r\n      toast.error(validationMessage, { position: \"top-right\" });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(`https://nftrade-marketplace.vercel.app/user/reset-password/${token}`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ newPassword }),\r\n      });\r\n\r\n      const data = await res.json();\r\n      if (!res.ok) {\r\n        toast.error(data.message || \"Password reset failed. Try again.\", { position: \"top-right\" });\r\n        return;\r\n      }\r\n\r\n      toast.success(data.message || \"Password reset successful. You can now log in.\", { position: \"top-right\" });\r\n\r\n      setTimeout(() => {\r\n        navigate(\"/login\");\r\n      }, 1500);\r\n    } catch (error) {\r\n      toast.error(\"An error occurred while resetting the password. Try again later.\", { position: \"top-right\" });\r\n      console.error(error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"sm\">\r\n      <Paper elevation={3} sx={{ padding: 4, mt: 5, textAlign: \"center\" }}>\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          Reset Your Password\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" sx={{ mb: 2 }}>\r\n          Enter a new password to reset your account.\r\n        </Typography>\r\n\r\n        <Box component=\"form\" onSubmit={handlePasswordReset} sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n          <TextField\r\n            type=\"password\"\r\n            label=\"New Password\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            value={newPassword}\r\n            onChange={(e) => setNewPassword(e.target.value)}\r\n          />\r\n          <TextField\r\n            type=\"password\"\r\n            label=\"Confirm New Password\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            value={confirmPassword}\r\n            onChange={(e) => setConfirmPassword(e.target.value)}\r\n          />\r\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth disabled={loading}>\r\n            {loading ? <CircularProgress size={24} /> : \"Reset Password\"}\r\n          </Button>\r\n        </Box>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}